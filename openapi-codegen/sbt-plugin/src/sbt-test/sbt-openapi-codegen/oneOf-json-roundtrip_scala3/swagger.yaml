openapi: 3.0.3
servers:
  - url: /v3
info:
  description: File for testing json roundtripping of oneOf defns in scala 3 with circe
  version: 1.0.20-SNAPSHOT
  title: OneOf Json test for scala 3
tags: []
paths:
  '/adt/test':
    post:
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ADTWithDiscriminator'
      requestBody:
        required: true
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ADTWithDiscriminatorNoMapping'
    put:
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ADTWithoutDiscriminator'
      requestBody:
        required: true
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ADTWithoutDiscriminator'
  '/inline/enum/test':
    post:
      parameters:
        - name: query-enum
          in: query
          description: An enum, inline, in a query string
          required: true
          schema:
            type: string
            enum:
              - bar1
              - bar2
              - bar3
        - name: query-opt-enum
          in: query
          description: An optional enum, inline, in a query string
          required: false
          schema:
            type: string
            enum:
              - bar1
              - bar2
              - bar3
        - name: query-seq-enum
          in: query
          description: A sequence of enums, inline, in a query string
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - baz1
                - baz2
                - baz3
              default: baz2
        - name: query-opt-seq-enum
          in: query
          description: An optional sequence of enums, inline, in a query string
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - baz1
                - baz2
                - baz3
              default: baz2
      responses:
        '204':
          description: No Content
      requestBody:
        required: true
        description: Check inline enums
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectWithInlineEnum'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    ADTWithDiscriminator:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SubtypeWithD1'
        - $ref: '#/components/schemas/SubtypeWithD2'
      discriminator:
        propertyName: type
        mapping:
          'SubA': '#/components/schemas/SubtypeWithD1'
          'SubB': '#/components/schemas/SubtypeWithD2'
    # This has the same members as ADTWithDiscriminator, to test that we can extend multiple sealed traits in our ADT mappings
    ADTWithDiscriminatorNoMapping:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SubtypeWithD1'
        - $ref: '#/components/schemas/SubtypeWithD2'
      discriminator:
        propertyName: type
    SubtypeWithD1:
      type: object
      required:
        - s
      properties:
        s:
          type: string
        i:
          type: integer
        d:
          type: number
          format: double
    SubtypeWithD2:
      type: object
      required:
        - s
      properties:
        s:
          type: string
        a:
          type: array
          items:
            type: string
    ADTWithoutDiscriminator:
      type: object
      oneOf:
        ## A 'SubtypeWithoutD1' with only 'a' and 'd' fields set could be decoded as either a SubtypeWithoutD2 or SubtypeWithoutD3,
        ## and so must be defined first here, or else we'd fail validation
        - $ref: '#/components/schemas/SubtypeWithoutD1'
        - $ref: '#/components/schemas/SubtypeWithoutD2'
        - $ref: '#/components/schemas/SubtypeWithoutD3'
    SubtypeWithoutD1:
      type: object
      required:
        - s
        - a
      properties:
        s:
          type: string
        i:
          type: integer
        a:
          type: array
          items:
            type: string
        absent:
          type: string
    SubtypeWithoutD2:
      type: object
      required:
        - a
      properties:
        a:
          type: array
          items:
            type: string
        absent:
          type: string
    SubtypeWithoutD3:
      type: object
      required:
        - s
      properties:
        s:
          type: string
        i:
          type: integer
        e:
          $ref: '#/components/schemas/AnEnum'
        absent:
          type: string
    AnEnum:
      type: string
      enum:
        - Foo
        - Bar
        - Baz
    ObjectWithInlineEnum:
      title: ObjectWithInlineEnum
      required:
        - id
        - inlineEnum
      type: object
      properties:
        id:
          type: string
          format: uuid
        inlineEnum:
          type: string
          enum:
            - foo1
            - foo2
            - foo3
            - foo4

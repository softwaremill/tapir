openapi: 3.0.3
servers:
  - url: /v3
info:
  description: File for testing json roundtripping of oneOf defns in scala 2.x with circe
  version: 1.0.20-SNAPSHOT
  title: OneOf Json test for scala 2
tags: []
paths:
  '/adt/test':
    post:
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ADTWithDiscriminator'
      requestBody:
        required: true
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ADTWithDiscriminatorNoMapping'
    put:
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ADTWithoutDiscriminator'
      requestBody:
        required: true
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ADTWithoutDiscriminator'
  '/inline/simple/object':
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - foo
              properties:
                foo:
                  type: string
                bar:
                  type: string
                  format: uuid
      responses:
        "200":
          description: An object
          content:
          application/json:
            schema:
              type: object
              required:
                - foo
              properties:
                foo:
                  type: string
                bar:
                  type: string
                  format: uuid
    put:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - foo
              properties:
                foo:
                  type: string
                bar:
                  type: string
                  format: uuid
      responses:
        "200":
          description: An object
          content:
            multipart/form-data:
              schema:
                type: object
                required:
                  - foo
                properties:
                  foo:
                    type: string
                  bar:
                    type: string
                    format: uuid
        "400":
          description: application/octet-stream in error position
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/NotNullableThingy'
        "401":
          description: application/octet-stream in error position 2
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/NotNullableThingy'
    delete:
      responses:
        "200":
          description: empty response 1
        "201":
          description: empty response 2
        "401":
          description: empty response 3
        "402":
          description: empty response 4
    patch:
      requestBody:
        description: list type in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListType'
      responses:
        "200":
          description: list type out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListType'
        "400":
          description: list type error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListType'

components:
  schemas:
    ADTWithDiscriminator:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SubtypeWithD1'
        - $ref: '#/components/schemas/SubtypeWithD2'
      discriminator:
        propertyName: type
        mapping:
          'SubA': '#/components/schemas/SubtypeWithD1'
          'SubB': '#/components/schemas/SubtypeWithD2'
    # This has the same members as ADTWithDiscriminator, to test that we can extend multiple sealed traits in our ADT mappings
    ADTWithDiscriminatorNoMapping:
      type: object
      oneOf:
        - $ref: '#/components/schemas/SubtypeWithD1'
        - $ref: '#/components/schemas/SubtypeWithD2'
      discriminator:
        propertyName: type
    SubtypeWithD1:
      type: object
      required:
        - s
      properties:
        s:
          type: string
        i:
          type: integer
        d:
          type: number
          format: double
    SubtypeWithD2:
      type: object
      required:
        - s
      properties:
        s:
          type: string
        a:
          type: array
          items:
            type: string
    ADTWithoutDiscriminator:
      type: object
      oneOf:
        ## A 'SubtypeWithoutD1' with only 'a' and 'd' fields set could be decoded as either a SubtypeWithoutD2 or SubtypeWithoutD3,
        ## and so must be defined first here, or else we'd fail validation
        - $ref: '#/components/schemas/SubtypeWithoutD1'
        - $ref: '#/components/schemas/SubtypeWithoutD2'
        - $ref: '#/components/schemas/SubtypeWithoutD3'
    SubtypeWithoutD1:
      type: object
      required:
        - s
        - a
      properties:
        s:
          type: string
        i:
          type: integer
        a:
          type: array
          items:
            type: string
        absent:
          type: string
    SubtypeWithoutD2:
      type: object
      required:
        - a
      properties:
        a:
          type: array
          items:
            type: string
        absent:
          type: string
    SubtypeWithoutD3:
      type: object
      required:
        - s
      properties:
        s:
          type: string
        i:
          type: integer
        e:
          $ref: '#/components/schemas/AnEnum'
        absent:
          type: string
    AnEnum:
      type: string
      enum:
        - Foo
        - Bar
        - Baz
    NotNullableThingy:
      title: NotNullableThingy
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: string
          format: uuid
    ListType:
      title: ListType
      type: array
      items:
        type: string
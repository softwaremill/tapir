package sttp.tapir.generated

object TapirGeneratedEndpoints {

  import sttp.tapir._
  import sttp.tapir.model._
  import sttp.tapir.generic.auto._
  import sttp.tapir.json.circe._
  import io.circe.generic.semiauto._

  import sttp.tapir.generated.TapirGeneratedEndpointsJsonSerdes._
  import TapirGeneratedEndpointsSchemas._


  case class CommaSeparatedValues[T](values: List[T])
  case class ExplodedValues[T](values: List[T])
  trait ExtraParamSupport[T] {
    def decode(s: String): sttp.tapir.DecodeResult[T]
    def encode(t: T): String
  }
  implicit def makePathCodecFromSupport[T](implicit support: ExtraParamSupport[T]): sttp.tapir.Codec[String, T, sttp.tapir.CodecFormat.TextPlain] = {
    sttp.tapir.Codec.string.mapDecode(support.decode)(support.encode)
  }
  implicit def makeQueryCodecFromSupport[T](implicit support: ExtraParamSupport[T]): sttp.tapir.Codec[List[String], T, sttp.tapir.CodecFormat.TextPlain] = {
    sttp.tapir.Codec.listHead[String, String, sttp.tapir.CodecFormat.TextPlain]
      .mapDecode(support.decode)(support.encode)
  }
  implicit def makeQueryOptCodecFromSupport[T](implicit support: ExtraParamSupport[T]): sttp.tapir.Codec[List[String], Option[T], sttp.tapir.CodecFormat.TextPlain] = {
    sttp.tapir.Codec.listHeadOption[String, String, sttp.tapir.CodecFormat.TextPlain]
      .mapDecode(maybeV => DecodeResult.sequence(maybeV.toSeq.map(support.decode)).map(_.headOption))(_.map(support.encode))
  }
  implicit def makeUnexplodedQuerySeqCodecFromListHead[T](implicit support: sttp.tapir.Codec[List[String], T, sttp.tapir.CodecFormat.TextPlain]): sttp.tapir.Codec[List[String], CommaSeparatedValues[T], sttp.tapir.CodecFormat.TextPlain] = {
    sttp.tapir.Codec.listHead[String, String, sttp.tapir.CodecFormat.TextPlain]
      .mapDecode(values => DecodeResult.sequence(values.split(',').toSeq.map(e => support.rawDecode(List(e)))).map(s => CommaSeparatedValues(s.toList)))(_.values.map(support.encode).mkString(","))
  }
  implicit def makeUnexplodedQueryOptSeqCodecFromListHead[T](implicit support: sttp.tapir.Codec[List[String], T, sttp.tapir.CodecFormat.TextPlain]): sttp.tapir.Codec[List[String], Option[CommaSeparatedValues[T]], sttp.tapir.CodecFormat.TextPlain] = {
    sttp.tapir.Codec.listHeadOption[String, String, sttp.tapir.CodecFormat.TextPlain]
      .mapDecode{
        case None => DecodeResult.Value(None)
        case Some(values) => DecodeResult.sequence(values.split(',').toSeq.map(e => support.rawDecode(List(e)))).map(r => Some(CommaSeparatedValues(r.toList)))
      }(_.map(_.values.map(support.encode).mkString(",")))
  }
  implicit def makeExplodedQuerySeqCodecFromListSeq[T](implicit support: sttp.tapir.Codec[List[String], List[T], sttp.tapir.CodecFormat.TextPlain]): sttp.tapir.Codec[List[String], ExplodedValues[T], sttp.tapir.CodecFormat.TextPlain] = {
    support.mapDecode(l => DecodeResult.Value(ExplodedValues(l)))(_.values)
  }

  case class EnumExtraParamSupport[T <: enumeratum.EnumEntry](enumName: String, T: enumeratum.Enum[T]) extends ExtraParamSupport[T] {
    // Case-insensitive mapping
    def decode(s: String): sttp.tapir.DecodeResult[T] =
      scala.util.Try(T.upperCaseNameValuesToMap(s.toUpperCase))
        .fold(
          _ =>
            sttp.tapir.DecodeResult.Error(
              s,
              new NoSuchElementException(
                s"Could not find value $s for enum ${enumName}, available values: ${T.values.mkString(", ")}"
              )
            ),
          sttp.tapir.DecodeResult.Value(_)
        )
    def encode(t: T): String = t.entryName
  }
  def extraCodecSupport[T <: enumeratum.EnumEntry](enumName: String, T: enumeratum.Enum[T]): ExtraParamSupport[T] =
    EnumExtraParamSupport(enumName, T)
  sealed trait Error
  sealed trait ADTWithoutDiscriminator
  sealed trait ADTWithDiscriminator
  sealed trait ADTWithDiscriminatorNoMapping
  case class SimpleError (
    message: String
  ) extends Error
  case class NotFoundError (
    reason: String
  ) extends Error
  case class SubtypeWithoutD1 (
    s: String,
    i: Option[Int] = None,
    a: Seq[String],
    absent: Option[String] = None
  ) extends ADTWithoutDiscriminator
  case class SubtypeWithD1 (
    s: String,
    i: Option[Int] = None,
    d: Option[Double] = None
  ) extends ADTWithDiscriminator with ADTWithDiscriminatorNoMapping {
    def `type`: String = "SubA"
  }
  case class SubtypeWithoutD3 (
    s: String,
    i: Option[Int] = None,
    e: Option[AnEnum] = None,
    absent: Option[String] = None
  ) extends ADTWithoutDiscriminator
  case class ObjectWithInlineEnum (
    id: java.util.UUID,
    inlineEnum: ObjectWithInlineEnumInlineEnum
  )

  sealed trait ObjectWithInlineEnumInlineEnum extends enumeratum.EnumEntry
  object ObjectWithInlineEnumInlineEnum extends enumeratum.Enum[ObjectWithInlineEnumInlineEnum] with enumeratum.CirceEnum[ObjectWithInlineEnumInlineEnum] {
    val values = findValues
    case object foo1 extends ObjectWithInlineEnumInlineEnum
    case object foo2 extends ObjectWithInlineEnumInlineEnum
    case object foo3 extends ObjectWithInlineEnumInlineEnum
    case object foo4 extends ObjectWithInlineEnumInlineEnum
  }
  case class SubtypeWithoutD2 (
    a: Seq[String],
    absent: Option[String] = None
  ) extends ADTWithoutDiscriminator
  case class SubtypeWithD2 (
    s: String,
    a: Option[Seq[String]] = None
  ) extends ADTWithDiscriminator with ADTWithDiscriminatorNoMapping {
    def `type`: String = "SubB"
  }

  sealed trait AnEnum extends enumeratum.EnumEntry
  object AnEnum extends enumeratum.Enum[AnEnum] with enumeratum.CirceEnum[AnEnum] {
    val values = findValues
    case object Foo extends AnEnum
    case object Bar extends AnEnum
    case object Baz extends AnEnum
  }



  type GetBinaryTestEndpoint = Endpoint[Unit, Unit, Unit, sttp.capabilities.pekko.PekkoStreams.BinaryStream, sttp.capabilities.pekko.PekkoStreams]
  lazy val getBinaryTest: GetBinaryTestEndpoint =
    endpoint
      .get
      .in(("binary" / "test"))
      .out(streamBody(sttp.capabilities.pekko.PekkoStreams)(Schema.binary[Array[Byte]], CodecFormat.OctetStream()).description("Response CSV body"))

  type PostBinaryTestEndpoint = Endpoint[Unit, sttp.capabilities.pekko.PekkoStreams.BinaryStream, Unit, String, sttp.capabilities.pekko.PekkoStreams]
  lazy val postBinaryTest: PostBinaryTestEndpoint =
    endpoint
      .post
      .in(("binary" / "test"))
      .in(streamBody(sttp.capabilities.pekko.PekkoStreams)(Schema.binary[Array[Byte]], CodecFormat.OctetStream()))
      .out(jsonBody[String].description("successful operation"))

  type PutAdtTestEndpoint = Endpoint[Unit, ADTWithoutDiscriminator, Unit, ADTWithoutDiscriminator, Any]
  lazy val putAdtTest: PutAdtTestEndpoint =
    endpoint
      .put
      .in(("adt" / "test"))
      .in(jsonBody[ADTWithoutDiscriminator])
      .out(jsonBody[ADTWithoutDiscriminator].description("successful operation"))

  type PostAdtTestEndpoint = Endpoint[Unit, ADTWithDiscriminatorNoMapping, Unit, ADTWithDiscriminator, Any]
  lazy val postAdtTest: PostAdtTestEndpoint =
    endpoint
      .post
      .in(("adt" / "test"))
      .in(jsonBody[ADTWithDiscriminatorNoMapping])
      .out(jsonBody[ADTWithDiscriminator].description("successful operation"))

  type PostInlineEnumTestEndpoint = Endpoint[Unit, (PostInlineEnumTestQueryEnum, Option[PostInlineEnumTestQueryOptEnum], List[PostInlineEnumTestQuerySeqEnum], Option[List[PostInlineEnumTestQueryOptSeqEnum]], ObjectWithInlineEnum), Unit, Unit, Any]
  lazy val postInlineEnumTest: PostInlineEnumTestEndpoint =
    endpoint
      .post
      .in(("inline" / "enum" / "test"))
      .in(query[PostInlineEnumTestQueryEnum]("query-enum").description("An enum, inline, in a query string"))
      .in(query[Option[PostInlineEnumTestQueryOptEnum]]("query-opt-enum").description("An optional enum, inline, in a query string"))
      .in(query[CommaSeparatedValues[PostInlineEnumTestQuerySeqEnum]]("query-seq-enum").map(_.values)(CommaSeparatedValues(_)).description("A sequence of enums, inline, in a query string"))
      .in(query[Option[CommaSeparatedValues[PostInlineEnumTestQueryOptSeqEnum]]]("query-opt-seq-enum").map(_.map(_.values))(_.map(CommaSeparatedValues(_))).description("An optional sequence of enums, inline, in a query string"))
      .in(jsonBody[ObjectWithInlineEnum])
      .out(statusCode(sttp.model.StatusCode(204)).description("No Content"))

  sealed trait PostInlineEnumTestQueryEnum extends enumeratum.EnumEntry
  object PostInlineEnumTestQueryEnum extends enumeratum.Enum[PostInlineEnumTestQueryEnum] with enumeratum.CirceEnum[PostInlineEnumTestQueryEnum] {
    val values = findValues
    case object bar1 extends PostInlineEnumTestQueryEnum
    case object bar2 extends PostInlineEnumTestQueryEnum
    case object bar3 extends PostInlineEnumTestQueryEnum
    implicit val enumCodecSupportPostInlineEnumTestQueryEnum: ExtraParamSupport[PostInlineEnumTestQueryEnum] =
      extraCodecSupport[PostInlineEnumTestQueryEnum]("PostInlineEnumTestQueryEnum", PostInlineEnumTestQueryEnum)
  }

  sealed trait PostInlineEnumTestQueryOptEnum extends enumeratum.EnumEntry
  object PostInlineEnumTestQueryOptEnum extends enumeratum.Enum[PostInlineEnumTestQueryOptEnum] with enumeratum.CirceEnum[PostInlineEnumTestQueryOptEnum] {
    val values = findValues
    case object bar1 extends PostInlineEnumTestQueryOptEnum
    case object bar2 extends PostInlineEnumTestQueryOptEnum
    case object bar3 extends PostInlineEnumTestQueryOptEnum
    implicit val enumCodecSupportPostInlineEnumTestQueryOptEnum: ExtraParamSupport[PostInlineEnumTestQueryOptEnum] =
      extraCodecSupport[PostInlineEnumTestQueryOptEnum]("PostInlineEnumTestQueryOptEnum", PostInlineEnumTestQueryOptEnum)
  }

  sealed trait PostInlineEnumTestQuerySeqEnum extends enumeratum.EnumEntry
  object PostInlineEnumTestQuerySeqEnum extends enumeratum.Enum[PostInlineEnumTestQuerySeqEnum] with enumeratum.CirceEnum[PostInlineEnumTestQuerySeqEnum] {
    val values = findValues
    case object baz1 extends PostInlineEnumTestQuerySeqEnum
    case object baz2 extends PostInlineEnumTestQuerySeqEnum
    case object baz3 extends PostInlineEnumTestQuerySeqEnum
    implicit val enumCodecSupportPostInlineEnumTestQuerySeqEnum: ExtraParamSupport[PostInlineEnumTestQuerySeqEnum] =
      extraCodecSupport[PostInlineEnumTestQuerySeqEnum]("PostInlineEnumTestQuerySeqEnum", PostInlineEnumTestQuerySeqEnum)
  }

  sealed trait PostInlineEnumTestQueryOptSeqEnum extends enumeratum.EnumEntry
  object PostInlineEnumTestQueryOptSeqEnum extends enumeratum.Enum[PostInlineEnumTestQueryOptSeqEnum] with enumeratum.CirceEnum[PostInlineEnumTestQueryOptSeqEnum] {
    val values = findValues
    case object baz1 extends PostInlineEnumTestQueryOptSeqEnum
    case object baz2 extends PostInlineEnumTestQueryOptSeqEnum
    case object baz3 extends PostInlineEnumTestQueryOptSeqEnum
    implicit val enumCodecSupportPostInlineEnumTestQueryOptSeqEnum: ExtraParamSupport[PostInlineEnumTestQueryOptSeqEnum] =
      extraCodecSupport[PostInlineEnumTestQueryOptSeqEnum]("PostInlineEnumTestQueryOptSeqEnum", PostInlineEnumTestQueryOptSeqEnum)
  }

  type GetOneofErrorTestEndpoint = Endpoint[Unit, Unit, Error, Unit, Any]
  lazy val getOneofErrorTest: GetOneofErrorTestEndpoint =
    endpoint
      .get
      .in(("oneof" / "error" / "test"))
      .errorOut(oneOf[Error](oneOfVariant(sttp.model.StatusCode(404), jsonBody[NotFoundError].description("Not found")), oneOfVariant(sttp.model.StatusCode(400), jsonBody[SimpleError].description("Not found"))))
      .out(statusCode(sttp.model.StatusCode(204)).description("No response"))

  lazy val generatedEndpoints = List(getBinaryTest, postBinaryTest, putAdtTest, postAdtTest, postInlineEnumTest, getOneofErrorTest)

}
